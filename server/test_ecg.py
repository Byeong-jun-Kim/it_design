import neurokit2 as nk
import pandas as pd
import matplotlib.pyplot as plt

# Generate 15 seconds of PPG signal (recorded at 250 samples / second)
# ppg = nk.ppg_simulate(duration=15, sampling_rate=250, heart_rate=70)

# data_path = 'ppgdata.xlsx'
# ppg = pd.read_excel(data_path, usecols = [1]).values
# ppg = ppg - 720
ecg = [373,383,380,386,401,248,400,358,360,330,306,289,316,389,390,374,375,360,352,361,385,382,233,371,331,331,321,283,290,295,376,378,384,371,366,362,357,395,380,246,393,362,352,325,304,304,327,407,401,385,385,368,355,354,382,365,242,352,339,319,326,284,255,302,369,376,371,369,371,343,354,386,391,330,356,370,346,319,291,294,343,391,394,388,362,383,354,362,386,376,232,360,350,342,328,314,304,312,380,396,373,385,369,363,354,381,367,326,445,356,344,315,293,293,321,373,372,380,351,368,359,342,371,376,371,381,345,364,329,315,278,294,342,396,392,373,365,375,357,360,386,373,239,377,362,320,339,317,321,323,396,401,400,394,383,402,365,397,392,372,474,360,352,324,305,291,299,342,378,383,366,346,349,327,367,373,388,405,368,325,322,300,280,280,330,378,373,373,384,358,332,347,375,382,229,380,348,348,320,286,298,336,384,380,379,368,387,351,372,384,380,307,421,351,348,321,312,292,308,374,414,391,393,393,384,367,391,397,324,442,379,366,336,313,304,331,401,378,370,372,380,350,364,367,378,372,356,329,326,290,282,279,329,371,389,371,382,356,327,362,366,356,427,340,329,301,296,258,261,324,348,346,314,317,316,270,303,301,273,369,305,280,274,254,229,249,326,374,356,348,347,331,315,365,373,345,426,355,335,345,322,310,335,377,410,394,396,405,397,374,402,397,376,474,391,372,356,329,309,317,384,430,410,382,406,363,380,398,393,296,413,349,344,332,317,302,320,374,377,359,363,360,336,359,367,361,211,364,334,345,324,297,269,313,385,391,382,372,358,346,351,391,393,376,456,365,362,322,326,296,300,357,389,399,382,385,387,347,362,372,387,352,367,346,339,316,303,299,339,392,401,376,376,374,353,348,382,373,271,405,357,350,320,302,280,307,370,394,390,376,385,374,340,384,377,344,442,379,344,331,327,314,314,423,462,444,456,440,430,424,402,403,249,389,347,321,307,271,255,287,337,366,338,348,314,318,355,337,336,388,323,297,281,258,250,272,353,340,345,346,357,316,325,355,364,214,318,313,297,276,267,251,280,336,332,311,314,314,283,306,311,284,365,296,275,255,238,233,265,336,357,349,348,376,345,370,397,398,325,450,362,383,355,329,328,333,417,419,429,422,414,386,386,411,412,297,428,389,359,343,309,318,340,408,413,393,389,393,351,378,399,379,244,370,357,353,334,315,304,335,392,391,407,405,383,376,372,385,423,315,380,349,327,329,290,290,338,381,390,361,377,383,348,373,367,362,208,356,349,330,313,295,276,289,360,374,390,375,353,343,328,371,367,359,435,349,324,310,294,271,282,348,382,357,371,364,377,342,350,366,374,226,368,358,333,325,295,294,322,398,403,399,381,364,362,361,373,389,331,423,351,338,318,305,298,292,370,385,382,379,365,355,342,381,354,274,399,356,335,312,297,287,308,396,395,379,372,375,364,367,375,374,249,368,366,336,324,303,278,312,375,401,389,393,383,361,345,355,377,250,370,360,328,313,297,294,294,370,376,379,365,366,336,358,374,367,247,363,361,344,315,299,292,335,373,391,371,365,350,341,372,381,397,440,368,336,328,301,301,299,349,383,377,376,369,354,357,386,376,270,403,354,362,339,312,315,319,396,406,399,389,366,345,376,371,391,358,346,353,320,300,280,293,341,388,376,375,367,382,334,355,366,369,391,346,344,346,303,286,284,352,379,379,377,379,356,336,365,382,377,285,350,339,336,330,292,302,319,374,373,376,372,377,351,353,352,368,282,412,343,343,320,308,299,299,376,387,366,372,376,357,328,377,362,373,468,354,338,329,315,292,278,354,406,391,377,367,375,352,378,389,377,459,383,357,339,327,293,307,378,392,398,379,365,361,346,379,370,303,439,350,332,315,303,285,276,354,374,373,377,360,348,325,346,381,363,377,335,347,328,290,276,298,343,376,376,375,377,354,356,367,385,383,410,353,351,328,306,275,304,344,385,392,376,374,379,347,369,376,389,475,360,341,326,305,273,305,370,402,392,383,383,350,368,371,363,227,363,342,336,308,291,286,310,368,397,380,370,341,345,353,365,377,435,361,327,323,303,286,296,343,382,383,369,378,373,339,372,362,344,438,352,337,318,295,280,294,350,385,393,369,377,367,325,371,382,350,443,349,335,338,304,298,314,380,400,383,369,360,357,363,385,370,274,405,348,352,322,301,281,308,381,408,391,404,387,375,405,404,425,416,377,358,341,300,278,265,342,358,363,362,361,341,343,365,354,238,362,348,328,324,280,265,307,375,383,377,359,350,320,361,370,374,280,319,312,288,255,237,220,259,319,296,267,272,259,245,272,258,251,239,214,210,200,180,179,181,237,305,298,320,315,313,299,352,368,380,337,360,368,341,358,328,360,406,449,448,441,442,452,414,448,459,463,491,433,440,387,383,334,345,414,458,426,424,411,388,364,406,396,371,467,374,335,329,308,286,282,375,401,400,389,391,360,356,386,395,298,403,346,314]
# ppg = list(map(lambda d: d - 140, ppg))
# Process it
# signals, info = nk.ecg_process(ecg, sampling_rate=31.25)
# print(info)
signals, info = nk.ecg_peaks(ecg, sampling_rate=31.25, method="hamilton2002", correct_artifacts=True)
signals2, info2 = nk.ecg_peaks(ecg, sampling_rate=31.25, method="nabian2018", correct_artifacts=True)
# nabian2018
nk.events_plot(info["ECG_R_Peaks"], ecg)
nk.events_plot(info2["ECG_R_Peaks"], ecg)
plt.show()
# print(signals["PPG_Clean"])
# print(signals["PPG_Peaks"])
# for idx, is_peak in enumerate(signals["PPG_Peaks"]):
#   if is_peak == 1:
#     print(idx)

# print(signals["PPG_Rate"].mean())
# Visualize the processing
# nk.ecg_plot(signals, sampling_rate=31.25)
# plt.show()
# plt.figure(figsize=(12,4))
# plt.plot(signals)
# plt.show()
